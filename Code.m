% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 24-May-2024 00:37:02
%
% This script assumes these variables are defined:
%
%   DATASET - input data.
%   LABEL - target data.
DATASET=xlsread('DataSet.xlsx');
LABEL=xlsread('LABEL.xlsx');
x = DATASET';
t = LABEL';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 120;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network on the Test Set
testX = x(:, tr.testInd);
testT = t(:, tr.testInd);
testY = net(testX);
testPerformance = perform(net, testT, testY);

% Calculate and plot the confusion matrix for the test set
figure, plotconfusion(testT, testY);

% Additional evaluation (optional)
tind = vec2ind(testT);
yind = vec2ind(testY);
percentRight = sum(tind == yind) / numel(tind)
